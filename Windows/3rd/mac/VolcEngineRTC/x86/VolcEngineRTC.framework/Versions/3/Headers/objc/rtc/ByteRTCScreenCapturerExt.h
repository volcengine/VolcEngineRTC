/*
 * Copyright 2021 @bytedance
 *
 *  Created on: Mar 14, 2021
 */

#pragma once

#import <Foundation/Foundation.h>
#import <CoreVideo/CoreVideo.h>
#import <ReplayKit/ReplayKit.h>

NS_ASSUME_NONNULL_BEGIN
#define BYTE_RTC_EXPORT __attribute__((visibility("default")))
/**
 * @locale zh
 * @type callback
 * @brief 屏幕采集相关扩展协议，仅适用于 SDK 内部采集。  <br>
 *        用户创建 extension 后生成的 SampleHandler 需继承此协议以实现屏幕共享相关能力。<br>
 * 注意：回调函数是在 SDK 内部线程（非 UI 线程）同步抛出来的，请不要做耗时操作或直接操作 UI，否则可能导致 app 崩溃。
 */
/**
 * @locale en
 * @type callback
 * @brief Screen capture related extension delegate, used for SDK internal capture only.  <br>
 *        The SampleHandler generated after the user creates the extension needs to inherit this delegate to implement screen sharing related capabilities.<br>
 * Note: Callback functions are thrown synchronously in a non-UI thread within the SDK. Therefore, you must not perform any time-consuming operations or direct UI operations within the callback function, as this may cause the app to crash.
 */
BYTE_RTC_EXPORT @protocol ByteRtcScreenCapturerExtDelegate <NSObject>
/**
 * @locale zh
 * @type api
 * @region 视频管理
 * @brief 通知 Broadcast Upload Extension 停止采集屏幕并退出。
 * @note iOS 端调用 stopScreenCapture{@link #ByteRTCVideo#stopScreenCapture}，或 macOS 端调用 stopScreenVideoCapture{@link #ByteRTCVideo#stopScreenVideoCapture}，会触发该方法通知 extension 端的 SDK 停止屏幕采集。
 */
/**
 * @locale en
 * @type api
 * @region Video Management
 * @brief Notify Broadcast Upload Extension to stop capturing and exit.
 * @note After the user calls stopScreenCapture{@link #ByteRTCVideo#stopScreenCapture} on iOS or stopScreenVideoCapture{@link #ByteRTCVideo#stopScreenVideoCapture} on macOS, this method will be triggered to notify the SDK on the Extension side to stop the screen capture.
 */
- (void)onQuitFromApp;
/**
 * @locale zh
 * @type api
 * @region 视频管理
 * @brief Socket 收到 App 侧发来的信息时，触发该回调
 * @param message App 侧发送的消息
 */
/**
 * @locale en
 * @type api
 * @region Video Management
 * @brief The callback is triggered when the socket receives a message from the App side
 * @param message Message received from the App side
 */
- (void)onReceiveMessageFromApp:(NSData *)message;
/**
 * @locale zh
 * @type api
 * @region 视频管理
 * @brief Socket 连接断开时触发此回调
 */
/**
 * @locale en
 * @type api
 * @region Video Management
 * @brief This callback is triggered when the socket is disconnected
 */
- (void)onSocketDisconnect;
/**
 * @locale zh
 * @type api
 * @region 视频管理
 * @brief Socket 连接成功时触发此回调
 */
/**
 * @locale en
 * @type api
 * @region Video Management
 * @brief This callback is triggered when the socket is successfully connected
 */
- (void)onSocketConnect;
/**
 * @locale zh
 * @type api
 * @region 视频管理
 * @brief 检测到 App 正在进行音视频通话时触发此回调。
 */
/**
 * @locale en
 * @type api
 * @region Video Management
 * @brief This callback is triggered when the App is detected to be making an audio/video call.
 */
- (void)onNotifyAppRunning;
@end

/**
 * @locale zh
 * @type keytype
 * @brief 屏幕采集相关扩展实例，仅适用于 SDK 内部采集。  <br>
 *        用户创建 extesion 后生成的 SampleHandler 需通过此实例实现屏幕共享相关能力。
 */
/**
 * @locale en
 * @type keytype
 * @brief Screen capture related extension examples, for SDK internal capture only.  <br>
 *        The SampleHandler generated by the user after creating the extesion needs to implement screen sharing related capabilities through this instance.
 */
BYTE_RTC_EXPORT @interface ByteRtcScreenCapturerExt : NSObject

@property (readonly, class) ByteRtcScreenCapturerExt *shared; // NOLINT

@property (nonatomic, weak, nullable) NSObject<ByteRtcScreenCapturerExtDelegate> *delegate; // NOLINT
/**
 * @locale zh
 * @type api
 * @region 视频管理
 * @brief 开始屏幕采集  <br>
 *        Extension 启动后，系统将自动调用该方法开启屏幕采集。
 * @param delegate 回调代理，参看 ByteRtcScreenCapturerExtDelegate{@link #ByteRtcScreenCapturerExtDelegate}
 * @param groupId App groups 中配置的 group ID
 */
/**
 * @locale en
 * @type api
 * @region Video Management
 * @brief Start screen capture  <br>
 *        After the Extension is started, the system will automatically call this method to enable screen capture.
 * @param delegate Callback agent, see ByteRtcScreenCapturerExtDelegate{@link #ByteRtcScreenCapturerExtDelegate}
 * @param groupId The group ID set in App groups
 */
- (void)startWithDelegate:(NSObject<ByteRtcScreenCapturerExtDelegate> *)delegate groupId:(NSString *)groupId;
/**
 * @locale zh
 * @type api
 * @region 视频管理
 * @brief 结束屏幕采集  <br>
 *        Extension 关闭后，系统将自动调用该方法停止屏幕采集。
 */
/**
 * @locale en
 * @type api
 * @region Video Management
 * @brief Stop screen capture  <br>
 *        After the Extension is closed, the system will automatically call this method to stop screen capture.
 */
- (void)stop;
/**
 * @locale zh
 * @type api
 * @region 视频管理
 * @brief 推送 Extension 采集的数据
 * @param sampleBuffer 采集到的数据
 * @param sampleBufferType 数据类型
 */
/**
 * @locale en
 * @type api
 * @region Video Management
 * @brief Push data captured by Extension
 * @param sampleBuffer Captured data
 * @param sampleBufferType Data type
 */
- (void)processSampleBuffer:(CMSampleBufferRef)sampleBuffer withType:(RPSampleBufferType)sampleBufferType API_AVAILABLE(ios(10));
@end

NS_ASSUME_NONNULL_END
